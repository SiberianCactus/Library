// Code generated by go-swagger; DO NOT EDIT.

package authors

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the generate command

import (
	"net/http"

	"github.com/go-openapi/runtime/middleware"
)

// GetAuthorByIDHandlerFunc turns a function with the right signature into a get author by Id handler
type GetAuthorByIDHandlerFunc func(GetAuthorByIDParams) middleware.Responder

// Handle executing the request and returning a response
func (fn GetAuthorByIDHandlerFunc) Handle(params GetAuthorByIDParams) middleware.Responder {
	return fn(params)
}

// GetAuthorByIDHandler interface for that can handle valid get author by Id params
type GetAuthorByIDHandler interface {
	Handle(GetAuthorByIDParams) middleware.Responder
}

// NewGetAuthorByID creates a new http.Handler for the get author by Id operation
func NewGetAuthorByID(ctx *middleware.Context, handler GetAuthorByIDHandler) *GetAuthorByID {
	return &GetAuthorByID{Context: ctx, Handler: handler}
}

/*
	GetAuthorByID swagger:route GET /authors/{authorId} Authors getAuthorById

# Find author by ID

Returns a single author
*/
type GetAuthorByID struct {
	Context *middleware.Context
	Handler GetAuthorByIDHandler
}

func (o *GetAuthorByID) ServeHTTP(rw http.ResponseWriter, r *http.Request) {
	route, rCtx, _ := o.Context.RouteInfo(r)
	if rCtx != nil {
		*r = *rCtx
	}
	var Params = NewGetAuthorByIDParams()
	if err := o.Context.BindValidRequest(r, route, &Params); err != nil { // bind params
		o.Context.Respond(rw, r, route.Produces, route, err)
		return
	}

	res := o.Handler.Handle(Params) // actually handle the request
	o.Context.Respond(rw, r, route.Produces, route, res)

}
